{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","params","paramsRoute","this","props","location","search","substring","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","param","value","replace","err","return","setState","react_default","a","createElement","className","alt","src","parseInt","transactionState","Component","Boolean","window","hostname","match","ReactDOM","render","react_router_dom","react_router","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAqDeA,oNAjDbC,MAAQ,CACNC,OAAQ,uFAKR,IAAIA,EAAS,GAETC,EAAcC,KAAKC,MAAMC,SAASC,OAAOC,UAAU,GAAGC,MAAM,KAJ9CC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAMlB,QAAAC,EAAAC,EAAkBZ,EAAlBa,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA+B,KAAtBU,EAAsBN,EAAAO,MAC7BnB,EAAOkB,EAAMX,MAAM,KAAK,IAAMW,EAAMX,MAAM,KAAK,GAAGa,QAAQ,IAAK,MAP/C,MAAAC,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GAUlBR,KAAKqB,SAAS,CACZvB,4CAKF,OACEwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BC,IAAI,YAAYC,IAAI,8EAKhEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAEmD,IAAjDI,SAAS5B,KAAKH,MAAMC,OAAO+B,kBAEzBP,EAAAC,EAAAC,cAAA,wDAEEF,EAAAC,EAAAC,cAAA,wCAENF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,+EA1CIM,cCSEC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,8ECXNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACZf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAW5C,KACpB6C,SAASC,eAAe,SDwH7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.06d33d9f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    params: {}\n  }\n\n  componentDidMount() {\n\n    let params = {}\n\n    let paramsRoute = this.props.location.search.substring(1).split('&');\n\n    for (let param of paramsRoute) {\n      params[param.split('=')[0]] = param.split('=')[1].replace('+', \" \");\n    }\n\n    this.setState({\n      params\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <div className=\"section center orange darken-2 container\">\n\n          <img className=\"responsive-img container\" alt=\"meniu-img\" src=\"https://meniu.com.co/wp-content/uploads/2018/08/cropped-meniu-blanco.png\"></img>\n\n        </div>\n\n\n        <div className=\"center\">\n          <br></br>\n          <br></br>\n          {\n            parseInt(this.state.params.transactionState) === 4 ?\n\n              <h5>Tu compra fue realizada satisfactoriamente</h5>\n\n              : <h5>Tu compra tuvo un problema</h5>\n          }\n          <br></br>\n          <h6><i>Puedes cerrar este navegador y volver a la aplicaci√≥n</i></h6>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(<Router>\n    <Route path=\"/\" component={App} />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}